---
# https://unit.nginx.org/installation/centos
- name: COPY unit repo
  copy:
    content: "{{ lookup('template', 'unit_repo.conf') }}"
    dest: /etc/yum.repos.d/unit.repo

- name: INSTALL package
  package:
    name:
      - python3
      - python-setuptools
      - git
      - unit
      - unit-python36
      - gcc
      - openssl-devel
      - bzip2-devel
      - libffi-devel
      - zlib-devel
    state: present

#- name: Download foo.conf
#  get_url:
#    url: https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz
#    dest: /usr/src/Python-3.7.9.tgz

- name: Unarchive Python3.7
  unarchive:
    src: https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz
    dest: /usr/src
    remote_src: yes

- name: Configure install Python3.7
  command: ./configure --enable-optimizations
  args:
    chdir: /usr/src/Python-3.7.9

- name: Install Python3.7
  make:
    chdir: /usr/src/Python-3.7.9
    target: altinstall

- name: Start service NGINX Unit, if not started
  service:
    name: unit
    state: started
    enabled: yes

- name: CREATE apps directoty
  file:
    path: /etc/faas-apps
    state: directory

- name: CREATE access log file
  file:
    path: /var/log/unit/access.log
    state: touch

- name: CREATE app directoty
  file:
    path: "/etc/faas-apps/{{ faas_app.name }}/"
    state: directory

- name: FETCH app project
  git:
    repo: "{{ faas_app.repo }}"
    dest: "/etc/faas-apps/{{ faas_app.name }}/"
    force: yes

- name: SET write permission directory
  file:
    path: "/etc/faas-apps/{{ faas_app.name }}"
    state: directory
    mode: '0777'

- name: SET write permission declaration.json
  file:
    path: "/etc/faas-apps/{{ faas_app.name }}/declaration.json"
    mode: '0777'

- name: SET write permission logstream.log
  file:
    path: "/etc/faas-apps/{{ faas_app.name }}/logstream.log"
    mode: '0777'

- name: INSTALL virtualenv
  pip:
    name:
      - pip
      - virtualenv
    state: forcereinstall
    executable: pip3.7

- name: INSTALL requirements
  pip:
    requirements: "/etc/faas-apps/{{ faas_app.name }}/requirements.txt"
    virtualenv: /etc/faas-apps/venv
    virtualenv_python: python3.7
    virtualenv_command: /usr/local/bin/virtualenv

- name: SET var_bundle
  set_fact:
    var_bundle: "{{ lookup('template', 'bundle.pem') }}"

- name: CMP_OUTPUT
  debug:
    msg: "{{ var_bundle }}"

# https://unit.nginx.org/configuration/#ssl-tls-and-certificates
- name: CREATE a new TLS bundle in Unit TLS store
  uri:
    unix_socket: /var/run/unit/control.sock
    url: "http://{{ inventory_hostname }}/certificates/bundle_{{ faas_app.name }}"
    method: PUT
    body: "{{ var_bundle }}"
    body_format: json
    timeout: 60
    status_code: 200, 202
    validate_certs: false
  ignore_errors: yes

- name: GET current TLS bundle in Unit TLS store
  uri:
    unix_socket: /var/run/unit/control.sock
    url: "http://{{ inventory_hostname }}/certificates/bundle_{{ faas_app.name }}/chain/0/"
    method: GET
    return_content: yes
    status_code: 200
    validate_certs: false
  register: crt_json

- debug:
    var: crt_json

- name: GET current Unit configuration
  uri:
    unix_socket: /var/run/unit/control.sock
    url: "http://{{ inventory_hostname }}/config/"
    method: GET
    return_content: yes
    status_code: 200
    validate_certs: false
  register: config_json

- debug:
    var: config_json

# https://unit.nginx.org/configuration/#python
- name: UPDATE Unit configuration
  uri:
    unix_socket: /var/run/unit/control.sock
    url: "http://{{ inventory_hostname }}/config/"
    method: PUT
    headers:
        Content-Type: application/json
    body: "{{ lookup('template', 'nginx_unit_faas_app.json') }}"
    body_format: json
    timeout: 60
    status_code: 200, 202
    validate_certs: false
  register: config_json

- debug:
    var: config_json

- name: ReStart service NGINX Unit
  service:
    name: unit
    state: restarted

- name: GET current Unit configuration
  uri:
    unix_socket: /var/run/unit/control.sock
    url: "http://{{ inventory_hostname }}/config/"
    method: GET
    return_content: yes
    status_code: 200
    validate_certs: false
  register: config_json

- debug:
    var: config_json

...